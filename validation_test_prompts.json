[
  {
    "case_name": "Login Count Reset Logic",
    "original_prompt": "\nORIGINAL CODE TEST:\n\nHere is some code to analyze:\n\n```python\ndef process_user_login(user):\n    if not user.email:\n        user.status = \"invalid\"\n        user.login_count = 0\n        return \"email_required\"\n    \n    if user.status == \"banned\":\n        user.login_count = 0\n        return \"account_banned\"\n    \n    if user.failed_attempts > 5:\n        user.status = \"locked\"\n        user.login_count = 0\n        return \"account_locked\"\n    \n    user.login_count += 1\n    return \"login_successful\"\n```\n\nQuestion: List ALL the conditions under which login_count gets set to 0.\n\nPlease provide a precise, step-by-step answer.\n",
    "holochain_prompt": "\nHOLOCHAIN TEST:\n\nHere is a HoloChain representation to analyze:\n\n```\nF:process_user_login(user)->result\nG:!email->status=invalid->login_count=0->R:email_required\nG:status==banned->login_count=0->R:account_banned\nG:failed_attempts>5->status=locked->login_count=0->R:account_locked\nG:else->login_count=login_count+1->R:login_successful\n```\n\nQuestion: List ALL the conditions under which login_count gets set to 0.\n\nPlease provide a precise, step-by-step answer.\n",
    "correct_answer": [
      "When user has no email (!email)",
      "When user status is 'banned' (status==banned)",
      "When user has more than 5 failed attempts (failed_attempts>5)"
    ],
    "validation_criteria": "Answer must include all 3 conditions and no false conditions",
    "token_analysis": {
      "original_tokens": 105,
      "holochain_tokens": 84,
      "compression_ratio": 20.0
    }
  },
  {
    "case_name": "Discount Calculation Trace",
    "original_prompt": "\nORIGINAL CODE TEST:\n\nHere is some code to analyze:\n\n```python\ndef calculate_customer_discount(customer, order_total):\n    base_discount = 0.0\n    \n    if customer.type == \"premium\":\n        if customer.years >= 5:\n            base_discount = 0.20\n        elif customer.years >= 2:\n            base_discount = 0.15\n        else:\n            base_discount = 0.10\n    elif customer.type == \"regular\":\n        if customer.years >= 3:\n            base_discount = 0.08\n        else:\n            base_discount = 0.05\n    \n    if customer.loyalty_points > 1000:\n        base_discount += 0.05\n    \n    max_discount = 0.25\n    final_discount = min(base_discount, max_discount)\n    \n    return order_total * final_discount\n```\n\nQuestion: What is the exact discount amount for: premium customer, 6 years, 1200 loyalty points, $100 order?\n\nPlease provide a precise, step-by-step answer.\n",
    "holochain_prompt": "\nHOLOCHAIN TEST:\n\nHere is a HoloChain representation to analyze:\n\n```\nF:calculate_customer_discount(customer,order_total)->discount_amount\nG:type==premium&&years>=5->base_discount=0.20\nG:type==premium&&years>=2->base_discount=0.15\nG:type==premium->base_discount=0.10\nG:type==regular&&years>=3->base_discount=0.08\nG:type==regular->base_discount=0.05\nG:loyalty_points>1000->base_discount=base_discount+0.05\nR:min(base_discount,0.25)->final_discount\nR:order_total*final_discount->discount_amount\n```\n\nQuestion: What is the exact discount amount for: premium customer, 6 years, 1200 loyalty points, $100 order?\n\nPlease provide a precise, step-by-step answer.\n",
    "correct_answer": "$25.00",
    "validation_criteria": "Answer must be exactly $25.00 with correct reasoning",
    "token_analysis": {
      "original_tokens": 163,
      "holochain_tokens": 128,
      "compression_ratio": 21.472392638036812
    }
  },
  {
    "case_name": "Error Recovery Flow",
    "original_prompt": "\nORIGINAL CODE TEST:\n\nHere is some code to analyze:\n\n```python\ndef deploy_with_rollback(config, backup_path):\n    try:\n        validate_config(config)\n        create_backup(backup_path)\n        deploy_changes(config)\n        run_health_check()\n        return \"deployment_successful\"\n    except ValidationError:\n        return \"validation_failed\"\n    except BackupError:\n        return \"backup_failed\"\n    except DeploymentError:\n        restore_from_backup(backup_path)\n        return \"deployment_failed_restored\"\n    except HealthCheckError:\n        restore_from_backup(backup_path)\n        return \"health_check_failed_restored\"\n```\n\nQuestion: If deployment succeeds but health check fails, what operations are performed and what is returned?\n\nPlease provide a precise, step-by-step answer.\n",
    "holochain_prompt": "\nHOLOCHAIN TEST:\n\nHere is a HoloChain representation to analyze:\n\n```\nF:deploy_with_rollback(config,backup_path)->result\nG:validate_config()->create_backup()->deploy_changes()->run_health_check()->R:deployment_successful\nG:ValidationError->R:validation_failed\nG:BackupError->R:backup_failed\nG:DeploymentError->restore_from_backup()->R:deployment_failed_restored\nG:HealthCheckError->restore_from_backup()->R:health_check_failed_restored\n```\n\nQuestion: If deployment succeeds but health check fails, what operations are performed and what is returned?\n\nPlease provide a precise, step-by-step answer.\n",
    "correct_answer": "restore_from_backup() is called, then returns 'health_check_failed_restored'",
    "validation_criteria": "Must mention restore_from_backup() and correct return value",
    "token_analysis": {
      "original_tokens": 107,
      "holochain_tokens": 87,
      "compression_ratio": 18.69158878504673
    }
  }
]